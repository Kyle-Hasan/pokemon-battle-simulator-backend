type Query {
  pokemonSpecies: PokemonSpecies
  allPokemon(ids: [String!]): [PokemonSpecies!]!
  getAllUserTeams(userId: String!): [Team!]!
  getTeam(teamId: String!): Team!
}

type PokemonSpecies {
  _id: ID!
  name: String!
  baseStats: Stats!
  battleBackSprite: String
  battleFrontSprite: String
  menuSprite: String!
  teamBuilderSprite: String!
  learnableMoves: [Move!]!
  abilities: [Ability!]!
  type: [String!]!
}

type Stats {
  hp: Int!
  attack: Int!
  defense: Int!
  specialAttack: Int!
  specialDefense: Int!
  speed: Int!
}

type Move {
  _id: ID!
  name: String
  description: String!
  type: String!
  basePower: String!
  accuracy: Int
  category: String!
  contact: Int!
  pp: PP!
  animation: String!
}

type PP {
  base: Int!
  max: Int!
}

type Ability {
  _id: ID
  name: String
  description: String!
  animation: String!
  effects: String!
}

type Team {
  _id: ID!
  name: String!
  pokemon: [Pokemon!]!
}

type Pokemon {
  _id: ID!
  nickname: String
  level: Int!
  stats: Stats
  pokemonSpecies: PokemonSpecies!
  moves: [Move!]
  ability: Ability
}

type Mutation {
  blankTeam(userId: String!): Team!
  addPokemon(pokemon: AddPokemonInput!, teamId: String!): Pokemon!
  deletePokemon(pokemonId: String!, teamId: String!): Team!
  editPokemon(pokemon: AddPokemonInput!, pokemonId: String!, teamId: String!): Pokemon!
  editTeam(team: AddTeamInput!): Team!
  deleteTeam(teamId: String!): String!
  randomBattle: Battle!
}

input AddPokemonInput {
  nickname: String
  pokemonSpecies: String!
  moves: [String!]
  level: Int
  ability: String
}

input AddTeamInput {
  _id: String
  name: String
  pokemon: [AddPokemonInput!]
}

type Battle {
  id: ID!
  team1: [PokemonInBattle!]!
  team2: [PokemonInBattle!]!
  environment: Environment!
}

type PokemonInBattle {
  pokemon: Pokemon!
  status: Status
  remainingHealth: Int!
  isActive: Boolean!
  statStages: Stats!
}

type Status {
  burn: String
}

type Environment {
  weather: WeatherEffect
  terrain: TerrainEffect
  hazards: HazardState
  fieldEffects: FieldEffects
}

type WeatherEffect {
  type: String!
  duration: Int!
}

type TerrainEffect {
  type: String!
  duration: Int!
}

type HazardState {
  spikes: Int!
  toxicSpikes: Int!
  stealthRock: Boolean!
  stickyWeb: Boolean!
}

type FieldEffects {
  trickRoom: Boolean!
  gravity: Boolean!
  tailwind: Int!
  lightScreen: Int!
  reflect: Int!
  safeguard: Int!
}